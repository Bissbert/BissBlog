package ch.bissbert.bissblog.data;

import lombok.*;
import org.hibernate.Hibernate;

import javax.persistence.*;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A blog post that contains the following attributes:
 * <ul>
 *     <li>title</li>
 *     <li>content</li>
 *     <li>tags</li>
 *     <li>author</li>
 *     <li>comments</li>
 *     <li>published</li>
 *     <li>preview image</li>
 *     <li>images</li>
 * </ul>
 * @author Bissbert
 * @since 1.0.0
 * @version 1.0.0
 * @see ch.bissbert.bissblog.data.Image
 */
@Getter
@Setter
@ToString
@RequiredArgsConstructor
@Entity
@Table(name = "blog_post")
public class BlogPost {

    /**
     * The unique id of the blog post.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The title of the blog post.
     */
    private String title;

    /**
     * The content of the blog post.
     * <p>
     *     The content should be formatted in markdown.
     */
    private String content;

    /**
     * Author of the blog post.
     */
    private String author;

    /**
     * The date when the post was published.
     */
    private String date;

    @ElementCollection
    @CollectionTable(name = "tags", joinColumns = @JoinColumn(name = "tag_id"))
    @Column(name = "tag")
    private List<String> tags;

    /**
     * Array of bytes that represent the preview image.
     */
    private byte[] previewImage;

    /**
     * Mimetype of the preview image.
     */
    private String previewImageMimeType;

    //list of images using image class as a data container and using a one to many relationship
    /**
     * A list of images that are associated with this blog post.
     * @see ch.bissbert.bissblog.data.Image
     */
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "blogPost")
    private List<Image> images;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        BlogPost blogPost = (BlogPost) o;
        return Objects.equals(id, blogPost.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}
